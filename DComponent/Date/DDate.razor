@namespace DComponent
<input class="form-control" style="width:@Width;" disabled="@ReadOnly" id="@Id"
       type="@Type"
       pattern="@(DateType == DDateType.D ? DFormat : DTFormat)" value="@_dateValue" @onchange="@(e => {
                                                                                                      _dateValue = e.Value.ToString();
                                                                                                      if (DateValueChanged.HasDelegate)
                                                                                                          DateValueChanged.InvokeAsync(Convert.ToDateTime(e.Value)); })" />

@code {
    [Parameter]
    public DDateType DateType { get; set; } = DDateType.D;

    private string Type
    {
        get
        {
            switch (DateType)
            {
                case DDateType.D:
                    return "date";
                case DDateType.DT:
                    return "datetime-local";
                default:
                    return "data";
            }
        }
    }
    [Parameter]
    public string Id { get; set; }
    private string DFormat { get; set; } = "yyyy-MM-dd";
    private string DTFormat { get; set; } = "yyyy-MM-ddTHH:mm";
    [Parameter]
    public DateTime DateValue
    {
        get => Convert.ToDateTime(_dateValue);
        set
        {
            _dateValue = value.ToString(DFormat);
        }
    }
    [Parameter]
    public EventCallback<DateTime> DateValueChanged { get; set; }
    [Parameter]
    public string Width { get; set; } = "100%";
    private string _dateValue { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; } = false;


}
