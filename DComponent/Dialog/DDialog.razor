<div class="modal-backdrop fade @(IsVisible ? "d-block show" : "d-none")"></div>
<div id="@Id" class="modal fade @(IsVisible ? "d-block show" : "d-none")" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog @(ModalSize != ModalSizedef.MORMAL ? "modal-lg" : "") modal-title" style="margin-top:@($"{topValue}px;")" role="document">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="modalTitle">@HeaderTitle</h5>
                @if (ShowCloseBtn)
                {
                    <button type="button" class="close" aria-label="Close" @onclick="@CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                }
            </div>
            <div class="modal-body">
                @DialogContext
            </div>
            @if (FooterContext != null)
            {
                <div class="modal-footer bg-light">
                    @FooterContext
                </div>
            }
        </div>
    </div>
</div>

@code {
    public enum ModalSizedef : int
    {
        MORMAL = 0,
        LG = 1
    }

    [Parameter]
    public string HeaderTitle { get; set; }
    [Parameter]
    public RenderFragment DialogContext { get; set; }
    [Parameter]
    public RenderFragment FooterContext { get; set; }
    [Parameter]
    public bool IsVisible { get; set; } = false;
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter]
    public ModalSizedef ModalSize { get; set; } = ModalSizedef.MORMAL;
    [Parameter]
    public bool ShowCloseBtn { get; set; } = true;
    private string Id = $"md{Guid.NewGuid().ToString()}";
    private static int topValue = 0;

    protected void CloseModal()
    {
        IsVisible = false;
        if (IsVisibleChanged.HasDelegate)
            IsVisibleChanged.InvokeAsync(false);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

    }

}
