@namespace DComponent
@using System.Reflection

@if (EditRowContext != null)
{
    @EditRowContext
}
else
{
    <EditForm OnValidSubmit="@(e=> {
                                if (ValidSubmitEvent.HasDelegate)
                                    ValidSubmitEvent.InvokeAsync(editRow);
                                if (CancelEvent.HasDelegate)
                                    CancelEvent.InvokeAsync(editRow);
                            })" Context="EditFormContext"
              EditContext="@(new EditContext(editRow))">
        <DPanel>
            <BodyContent>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <DFormLayout>
                    @foreach ((string _, Column column) in TableState.Columns.Where(p => p.Value.EditMode != FieldEditMode.No))
                    {
                        var value = column.Property.GetValue(editRow) ?? string.Empty;
                        switch (column.CType)
                        {
                            case ColumnType.T:
                                <DFormLayoutItem Caption="@($"{column.Caption}:")" ColSpan="6">
                                    <Template>
                                        <input type="text" id="@(column.Property.Name))" class="form-control"
                                               value="@(value.ToString())"
                                               @onchange="@(e=>column.Property.SetValue(editRow,e.Value))"
                                               disabled="@(column.EditMode==FieldEditMode.ReadOnly?true:false)">
                                    </Template>
                                </DFormLayoutItem>
                                break;
                            case ColumnType.D:
                                <DFormLayoutItem Caption="@($"{column.Caption}:")" ColSpan="6">
                                    <Template>
                                        <DDate DateValue="@(Convert.ToDateTime(value))" Id="@(column.Property.Name)"
                                               DateValueChanged="@((e=>column.Property.SetValue(editRow,e)))"
                                               ReadOnly="@(column.EditMode==FieldEditMode.ReadOnly?true:false)">
                                        </DDate>
                                    </Template>
                                </DFormLayoutItem>
                                break;
                            case ColumnType.C:
                                var check = value.ToString() == column.CheckValue;
                                <DFormLayoutItem Caption="@($"{column.Caption}:")" ColSpan="6">
                                    <Template>
                                        <input type="checkbox" class="form-control" id="@(column.Property.Name))"
                                               checked="@check"
                                               @onchange="@((e=>column.Property.SetValue(editRow,Convert.ToBoolean(e.Value)?column.CheckValue:column.UnCheckValue)))"
                                               disabled="@(column.EditMode==FieldEditMode.ReadOnly?true:false)">
                                    </Template>
                                </DFormLayoutItem>
                                break;
                            case ColumnType.L:
                                var cData = column.CData.Select(p => Convert.ChangeType(p, column.DataType)).ToList();
                                <DFormLayoutItem Caption="@($"{column.Caption}:")" ColSpan="6">
                                    <Template>
                                        <DLookupEdit Data="@cData" Id="@(column.Property.Name)"
                                                     ReadOnly="@(column.EditMode==FieldEditMode.ReadOnly?true:false)"
                                                     SelectedValue="@value.ToString()"
                                                     SelectedValueChanged="@(e=>column.Property.SetValue(editRow,e))"
                                                     DisplayField="@column.DisplayField"
                                                     ValueField="@column.ValueField"></DLookupEdit>
                                    </Template>
                                </DFormLayoutItem>
                                break;
                            case ColumnType.S:
                                <DFormLayoutItem Caption="@($"{column.Caption}:")" ColSpan="6">
                                    <Template>
                                        <DSpinEdit CurrentValue="@(Convert.ToDecimal(value))"
                                                   CurrentValueChanged="@(e=>column.Property.SetValue(editRow,e))"
                                                   Disable="@(column.EditMode==FieldEditMode.ReadOnly?true:false)">
                                        </DSpinEdit>
                                    </Template>
                                </DFormLayoutItem>
                                break;
                        }

                    }
                </DFormLayout>                
            </BodyContent>
            <FooterContent>
                <button type="submit" class="btn btn-primary ml-1">确定</button>
                <a class="btn btn-primary ml-1" @onclick="@(e => { if (CancelEvent.HasDelegate) CancelEvent.InvokeAsync(e); })">取消</a>
            </FooterContent>
        </DPanel>        
    </EditForm>
}




@code {
    private object editRow;
    private object sourceRow;
    [CascadingParameter]
    protected TableStateHandler TableState { get; set; }
    [Parameter]
    public object Row
    {
        set
        {
            editRow = value;
        }
    }
    [Parameter]
    public RenderFragment EditRowContext { get; set; }
    [Parameter]
    public Type DataType { get; set; }
    [Parameter]
    public EventCallback<object> ValidSubmitEvent { get; set; }
    [Parameter]
    public EventCallback<object> CancelEvent { get; set; }
}
