@namespace DComponent
@foreach ((string _, Column column) in TableState.Columns.Where(p => p.Value.CType != ColumnType.O))
{
    var value = column.Property.GetValue(Row);
    switch (column.CType)
    {
        case ColumnType.T:
            <td>
                @value
            </td>
            break;
        case ColumnType.D:
            <td>
                @if (value != null)
                {
                    <span>@Convert.ToDateTime(value).ToString(column.CFormate)</span>
                }

            </td>
            break;
        case ColumnType.C:
            var check = value.ToString() == column.CheckValue;
            <td>
                <input type="checkbox" class="form-control" width="@column.CWidth" checked="@check" disabled="true" />
            </td>
            break;
        case ColumnType.L:
            <td>
                @{
                    //var cData = column.CData.Select(p => Convert.ChangeType(p, column.DataType)).ToList();
                    var convertValue = string.Empty;
                    var convertRow = column.CData.FirstOrDefault(p => column.DataType.GetProperty(column.ValueField).GetValue(p)?.ToString() == value?.ToString());
                    if (convertRow != null)
                        convertValue = column.DataType.GetProperty(column.DisplayField).GetValue(convertRow)?.ToString();
                }
                @convertValue
                @*<LookupEdit Data="@cData" Class="bg-transparent border-0" ReadOnly="true" SelectedValue="@value?.ToString()" DisplayField="@column.DisplayField" ValueField="@column.ValueField"></LookupEdit>*@
            </td>
            break;
        case ColumnType.U:
            <td>
                @column.CustomContext?.Invoke(Row)
            </td>
            break;
    }

}

@code {
    [CascadingParameter]
    protected TableStateHandler TableState { get; set; }
    [Parameter]
    public object Row { get; set; }

}
